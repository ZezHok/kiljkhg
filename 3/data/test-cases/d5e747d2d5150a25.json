{"uid":"d5e747d2d5150a25","name":"test_upload_pet_image_sizes_statuses[img_size3-400]","fullName":"main#test_upload_pet_image_sizes_statuses","historyId":"e7fcdece59283e078e4486808b110aea","time":{"start":1724668663768,"stop":1724668663861,"duration":93},"status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"base_url = 'https://petstore.swagger.io/v2', pet_id = 1304, img_size = (0, 0)\nexpected_status = 400\n\n    @pytest.mark.parametrize(\"img_size, expected_status\", [\n        ((256, 512), 200),\n        ((512, 1024), 200),\n        ((1, 1), 200),\n        ((0, 0), 400)\n    ])\n    def test_upload_pet_image_sizes_statuses(base_url, pet_id, img_size, expected_status):\n        def upload_image(file, metadata):\n            return requests.post(\n                f'{base_url}/pet/{pet_id}/uploadImage',\n                data={'additionalMetadata': metadata},\n                files={'file': file}\n            )\n    \n        if img_size == (0, 0):\n            response = upload_image(('empty.png', b'', 'image/png'), 'Testing with (0, 0) image')\n            print('\\nAttempted upload with image size (0, 0)')\n    \n        elif img_size == (1, 1):\n            response = upload_image(('small.png', b'', 'image/png'), 'Testing with (1, 1) image')\n            print('\\nAttempted upload with image size (1, 1)')\n    \n        else:\n            img = get_random_image(img_size)\n            img = (img * 255).astype(np.uint8)\n            additional_metadata = 'Random image upload'\n    \n            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_image_file:\n                image_path = temp_image_file.name\n                Image.fromarray(img).save(image_path)\n    \n            with open(image_path, 'rb') as file:\n                response = upload_image(file, additional_metadata)\n    \n            print(f'\\nUpload pet image with size {img_size}')\n    \n        print('\\nUpload pet image: image size & status code')\n        print('Text: ' + response.text)\n        print('Status: ' + str(response.status_code))\n>       assert response.status_code == expected_status\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\nmain.py:100: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1724668632339,"stop":1724668632339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pet_id","time":{"start":1724668632339,"stop":1724668632339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_function","time":{"start":1724668632340,"stop":1724668632567,"duration":227},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"base_url = 'https://petstore.swagger.io/v2', pet_id = 1304, img_size = (0, 0)\nexpected_status = 400\n\n    @pytest.mark.parametrize(\"img_size, expected_status\", [\n        ((256, 512), 200),\n        ((512, 1024), 200),\n        ((1, 1), 200),\n        ((0, 0), 400)\n    ])\n    def test_upload_pet_image_sizes_statuses(base_url, pet_id, img_size, expected_status):\n        def upload_image(file, metadata):\n            return requests.post(\n                f'{base_url}/pet/{pet_id}/uploadImage',\n                data={'additionalMetadata': metadata},\n                files={'file': file}\n            )\n    \n        if img_size == (0, 0):\n            response = upload_image(('empty.png', b'', 'image/png'), 'Testing with (0, 0) image')\n            print('\\nAttempted upload with image size (0, 0)')\n    \n        elif img_size == (1, 1):\n            response = upload_image(('small.png', b'', 'image/png'), 'Testing with (1, 1) image')\n            print('\\nAttempted upload with image size (1, 1)')\n    \n        else:\n            img = get_random_image(img_size)\n            img = (img * 255).astype(np.uint8)\n            additional_metadata = 'Random image upload'\n    \n            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_image_file:\n                image_path = temp_image_file.name\n                Image.fromarray(img).save(image_path)\n    \n            with open(image_path, 'rb') as file:\n                response = upload_image(file, additional_metadata)\n    \n            print(f'\\nUpload pet image with size {img_size}')\n    \n        print('\\nUpload pet image: image size & status code')\n        print('Text: ' + response.text)\n        print('Status: ' + str(response.status_code))\n>       assert response.status_code == expected_status\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\nmain.py:100: AssertionError","steps":[],"attachments":[{"uid":"d2bb42767aec6385","name":"stdout","source":"d2bb42767aec6385.txt","type":"text/plain","size":230}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup_function::0","time":{"start":1724668663931,"stop":1724668664195,"duration":264},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 906, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/kiljkhg/kiljkhg/conftest.py\", line 48, in setup_function\n    assert del_pet.status_code == 200\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"suite","value":"main"},{"name":"host","value":"fv-az523-769"},{"name":"thread","value":"2123-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"main"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_status","value":"400"},{"name":"img_size","value":"(0, 0)"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"5adfa544fbae4c94","reportUrl":"https://ZezHok.github.io/kiljkhg/2//#testresult/5adfa544fbae4c94","status":"failed","statusDetails":"AssertionError: assert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1724667958086,"stop":1724667958257,"duration":171}}]},"tags":[]},"source":"d5e747d2d5150a25.json","parameterValues":["400","(0, 0)"]}